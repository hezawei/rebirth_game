# .github/workflows/deploy.yml

# 工作流名称
name: Deploy to Aliyun ECS

# --- 触发条件 --- #
on:
  # 当有代码推送到 master 分支时触发
  push:
    branches:
      - master
      # 你也可以用 main 分支，根据你的仓库设置
      # - main

  # 允许你从 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:

# --- 任务定义 --- #
jobs:
  build-and-deploy:
    # 运行此任务的虚拟机环境
    runs-on: ubuntu-latest

    # --- 步骤 --- #
    steps:
      # 步骤1: 检出代码
      # 拉取你的仓库代码到 Actions 虚拟机中
      - name: 1. Checkout Code
        uses: actions/checkout@v4

      # 步骤2: 登录到 Docker Hub
      # 使用你在 GitHub Secrets 中配置的凭证
      - name: 2. Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤3: 设置 Docker Buildx
      # Buildx 是一个 Docker CLI 插件，用于扩展构建功能
      - name: 3. Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤4: 构建并推送 Docker 镜像
      # - context: . 表示使用当前目录的 Dockerfile
      # - file: ./Dockerfile 指定 Dockerfile 路径
      # - push: true 表示构建后推送到仓库
      # - tags: 定义镜像的标签，latest 表示最新版，也可以加入 commit hash 等
      - name: 4. Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rebirth_game:latest
          # 使用缓存来加速后续构建
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/rebirth_game:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/rebirth_game:buildcache,mode=max

      # 步骤5: 部署到阿里云服务器
      # 使用 SSH 连接到你的服务器并执行部署脚本
      - name: 5. Deploy to Aliyun ECS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}       # 服务器 IP 或域名
          username: ${{ secrets.SERVER_USERNAME }}   # 服务器用户名 (例如: root 或你创建的其他用户)
          key: ${{ secrets.SERVER_SSH_KEY }}    # 用于 SSH 连接的私钥
          script: |
            # 使用 set -e 确保任何命令失败都会使整个脚本失败
            set -e
            echo "[DEPLOY] 1/5 - 登录到 Docker Hub..."
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            
            echo "[DEPLOY] 2/5 - 拉取最新的 Docker 镜像..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/rebirth_game:latest
            
            # 容器名称
            CONTAINER_NAME="rebirth_game_container"

            echo "[DEPLOY] 3/5 - 停止并删除旧的容器 (如果存在)..."
            # 使用 '|| true' 确保在容器不存在时命令不会失败
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            
            echo "[DEPLOY] 4/5 - 启动新的容器..."
            # -d: 后台运行
            # --name: 命名容器，方便管理
            # -p 8000:8000: 将服务器的 8000 端口映射到容器的 8000 端口
            # --restart always: 确保在服务器重启或容器崩溃后，Docker 会自动重启容器
            docker run -d --name $CONTAINER_NAME -p 127.0.0.1:8000:8000 --restart always ${{ secrets.DOCKERHUB_USERNAME }}/rebirth_game:latest
            
            echo "[DEPLOY] 5/5 - 清理旧的无用镜像..."
            # 'docker image prune -f' 会删除所有悬空（dangling）的镜像，即没有被任何容器使用的镜像
            docker image prune -f

            echo "[SUCCESS] 部署成功完成!"
